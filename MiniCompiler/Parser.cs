// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-F60JC3Q
// DateTime: 6/21/2020 10:32:19 PM
// UserName: User
// Input file <kompilator.y - 6/21/2020 10:28:40 PM>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace MiniCompiler
{
public enum Tokens {error=2,EOF=3,Program=4,If=5,Else=6,
    While=7,Read=8,Write=9,Return=10,Int=11,Double=12,
    Bool=13,True=14,False=15,Assign=16,ConditionalOr=17,ConditionalAnd=18,
    BooleanLogicalOr=19,BooleanLogicalAnd=20,Equal=21,Inequal=22,GreaterThan=23,GreaterOrEqual=24,
    LessThan=25,LessOrEqual=26,Plus=27,Minus=28,Multiplication=29,Divide=30,
    LogicalNegation=31,BitwiseComplement=32,ParenthesisLeft=33,ParenthesisRight=34,CurlyBracketLeft=35,CurlyBracketRight=36,
    Semicolon=37,Eof=38,IntConversion=39,DoubleConversion=40,IntNumber=41,DoubleNumber=42,
    Identificator=43,Comment=44,String=45};

public struct ValueType
#line 6 "kompilator.y"
{
public string  val;
public char    type;
}
#line default
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[63];
  private static State[] states = new State[100];
  private static string[] nonTerms = new string[] {
      "prestatement", "statement", "expression", "A", "B", "C", "D", "E", "F", 
      "logical", "relation", "oppadd", "oppmul", "binary", "unar", "start", "$accept", 
      };

  static Parser() {
    states[0] = new State(new int[]{4,3},new int[]{-16,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{35,4});
    states[4] = new State(new int[]{36,7,13,8,11,12,12,16,35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93},new int[]{-1,5,-2,20,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[5] = new State(new int[]{36,6});
    states[6] = new State(-2);
    states[7] = new State(-3);
    states[8] = new State(new int[]{43,9});
    states[9] = new State(new int[]{37,10});
    states[10] = new State(new int[]{13,8,11,12,12,16,35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93,36,-4},new int[]{-1,11,-2,20,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[11] = new State(-5);
    states[12] = new State(new int[]{43,13});
    states[13] = new State(new int[]{37,14});
    states[14] = new State(new int[]{13,8,11,12,12,16,35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93,36,-6},new int[]{-1,15,-2,20,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[15] = new State(-7);
    states[16] = new State(new int[]{43,17});
    states[17] = new State(new int[]{37,18});
    states[18] = new State(new int[]{13,8,11,12,12,16,35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93,36,-8},new int[]{-1,19,-2,20,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[19] = new State(-9);
    states[20] = new State(-10);
    states[21] = new State(new int[]{36,24,35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93},new int[]{-2,22,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[22] = new State(new int[]{36,23});
    states[23] = new State(-11);
    states[24] = new State(-26);
    states[25] = new State(new int[]{33,26});
    states[26] = new State(new int[]{43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64},new int[]{-3,27,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[27] = new State(new int[]{34,28});
    states[28] = new State(new int[]{35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93},new int[]{-2,29,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[29] = new State(-12);
    states[30] = new State(new int[]{33,31});
    states[31] = new State(new int[]{43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64},new int[]{-3,32,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[32] = new State(new int[]{34,33});
    states[33] = new State(new int[]{35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93},new int[]{-2,34,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[34] = new State(-13);
    states[35] = new State(new int[]{37,36});
    states[36] = new State(new int[]{35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93,36,-14},new int[]{-2,37,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[37] = new State(-15);
    states[38] = new State(new int[]{37,39});
    states[39] = new State(new int[]{35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93,36,-16},new int[]{-2,40,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[40] = new State(-17);
    states[41] = new State(new int[]{16,42,19,-54,20,-54,29,-54,30,-54,27,-54,28,-54,21,-54,22,-54,23,-54,24,-54,25,-54,26,-54,17,-54,18,-54,37,-54,34,-54});
    states[42] = new State(new int[]{28,56,32,57,31,58,39,59,40,60,43,61,41,62,42,63,33,64},new int[]{-4,43,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[43] = new State(new int[]{17,68,18,69,37,-27,34,-27},new int[]{-10,44});
    states[44] = new State(new int[]{28,56,32,57,31,58,39,59,40,60,43,61,41,62,42,63,33,64},new int[]{-5,45,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[45] = new State(new int[]{21,71,22,72,23,73,24,74,25,75,26,76,17,-29,18,-29,37,-29,34,-29},new int[]{-11,46});
    states[46] = new State(new int[]{28,56,32,57,31,58,39,59,40,60,43,61,41,62,42,63,33,64},new int[]{-6,47,-7,80,-8,83,-9,86,-15,54});
    states[47] = new State(new int[]{27,78,28,79,21,-33,22,-33,23,-33,24,-33,25,-33,26,-33,17,-33,18,-33,37,-33,34,-33},new int[]{-12,48});
    states[48] = new State(new int[]{28,56,32,57,31,58,39,59,40,60,43,61,41,62,42,63,33,64},new int[]{-7,49,-8,83,-9,86,-15,54});
    states[49] = new State(new int[]{29,81,30,82,27,-41,28,-41,21,-41,22,-41,23,-41,24,-41,25,-41,26,-41,17,-41,18,-41,37,-41,34,-41},new int[]{-13,50});
    states[50] = new State(new int[]{28,56,32,57,31,58,39,59,40,60,43,61,41,62,42,63,33,64},new int[]{-8,51,-9,86,-15,54});
    states[51] = new State(new int[]{19,84,20,85,29,-45,30,-45,27,-45,28,-45,21,-45,22,-45,23,-45,24,-45,25,-45,26,-45,17,-45,18,-45,37,-45,34,-45},new int[]{-14,52});
    states[52] = new State(new int[]{28,56,32,57,31,58,39,59,40,60,43,61,41,62,42,63,33,64},new int[]{-9,53,-15,54});
    states[53] = new State(-49);
    states[54] = new State(new int[]{28,56,32,57,31,58,39,59,40,60,43,61,41,62,42,63,33,64},new int[]{-9,55,-15,54});
    states[55] = new State(-53);
    states[56] = new State(-58);
    states[57] = new State(-59);
    states[58] = new State(-60);
    states[59] = new State(-61);
    states[60] = new State(-62);
    states[61] = new State(-54);
    states[62] = new State(-55);
    states[63] = new State(-56);
    states[64] = new State(new int[]{43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64},new int[]{-3,65,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[65] = new State(new int[]{34,66});
    states[66] = new State(-57);
    states[67] = new State(new int[]{17,68,18,69,37,-28,34,-28},new int[]{-10,44});
    states[68] = new State(-31);
    states[69] = new State(-32);
    states[70] = new State(new int[]{21,71,22,72,23,73,24,74,25,75,26,76,17,-30,18,-30,37,-30,34,-30},new int[]{-11,46});
    states[71] = new State(-35);
    states[72] = new State(-36);
    states[73] = new State(-37);
    states[74] = new State(-38);
    states[75] = new State(-39);
    states[76] = new State(-40);
    states[77] = new State(new int[]{27,78,28,79,21,-34,22,-34,23,-34,24,-34,25,-34,26,-34,17,-34,18,-34,37,-34,34,-34},new int[]{-12,48});
    states[78] = new State(-43);
    states[79] = new State(-44);
    states[80] = new State(new int[]{29,81,30,82,27,-42,28,-42,21,-42,22,-42,23,-42,24,-42,25,-42,26,-42,17,-42,18,-42,37,-42,34,-42},new int[]{-13,50});
    states[81] = new State(-47);
    states[82] = new State(-48);
    states[83] = new State(new int[]{19,84,20,85,29,-46,30,-46,27,-46,28,-46,21,-46,22,-46,23,-46,24,-46,25,-46,26,-46,17,-46,18,-46,37,-46,34,-46},new int[]{-14,52});
    states[84] = new State(-51);
    states[85] = new State(-52);
    states[86] = new State(-50);
    states[87] = new State(new int[]{35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93,36,-18},new int[]{-2,88,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[88] = new State(-19);
    states[89] = new State(new int[]{45,97,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64},new int[]{-3,90,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[90] = new State(new int[]{37,91});
    states[91] = new State(new int[]{35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93,36,-20},new int[]{-2,92,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[92] = new State(-21);
    states[93] = new State(new int[]{43,94});
    states[94] = new State(new int[]{37,95});
    states[95] = new State(new int[]{35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93,36,-24},new int[]{-2,96,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[96] = new State(-25);
    states[97] = new State(new int[]{37,98});
    states[98] = new State(new int[]{35,21,5,25,7,30,10,35,43,41,28,56,32,57,31,58,39,59,40,60,41,62,42,63,33,64,37,87,9,89,8,93,36,-22},new int[]{-2,99,-3,38,-4,67,-5,70,-6,77,-7,80,-8,83,-9,86,-15,54});
    states[99] = new State(-23);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-17, new int[]{-16,3});
    rules[2] = new Rule(-16, new int[]{4,35,-1,36});
    rules[3] = new Rule(-16, new int[]{4,35,36});
    rules[4] = new Rule(-1, new int[]{13,43,37});
    rules[5] = new Rule(-1, new int[]{13,43,37,-1});
    rules[6] = new Rule(-1, new int[]{11,43,37});
    rules[7] = new Rule(-1, new int[]{11,43,37,-1});
    rules[8] = new Rule(-1, new int[]{12,43,37});
    rules[9] = new Rule(-1, new int[]{12,43,37,-1});
    rules[10] = new Rule(-1, new int[]{-2});
    rules[11] = new Rule(-2, new int[]{35,-2,36});
    rules[12] = new Rule(-2, new int[]{5,33,-3,34,-2});
    rules[13] = new Rule(-2, new int[]{7,33,-3,34,-2});
    rules[14] = new Rule(-2, new int[]{10,37});
    rules[15] = new Rule(-2, new int[]{10,37,-2});
    rules[16] = new Rule(-2, new int[]{-3,37});
    rules[17] = new Rule(-2, new int[]{-3,37,-2});
    rules[18] = new Rule(-2, new int[]{37});
    rules[19] = new Rule(-2, new int[]{37,-2});
    rules[20] = new Rule(-2, new int[]{9,-3,37});
    rules[21] = new Rule(-2, new int[]{9,-3,37,-2});
    rules[22] = new Rule(-2, new int[]{9,45,37});
    rules[23] = new Rule(-2, new int[]{9,45,37,-2});
    rules[24] = new Rule(-2, new int[]{8,43,37});
    rules[25] = new Rule(-2, new int[]{8,43,37,-2});
    rules[26] = new Rule(-2, new int[]{35,36});
    rules[27] = new Rule(-3, new int[]{43,16,-4});
    rules[28] = new Rule(-3, new int[]{-4});
    rules[29] = new Rule(-4, new int[]{-4,-10,-5});
    rules[30] = new Rule(-4, new int[]{-5});
    rules[31] = new Rule(-10, new int[]{17});
    rules[32] = new Rule(-10, new int[]{18});
    rules[33] = new Rule(-5, new int[]{-5,-11,-6});
    rules[34] = new Rule(-5, new int[]{-6});
    rules[35] = new Rule(-11, new int[]{21});
    rules[36] = new Rule(-11, new int[]{22});
    rules[37] = new Rule(-11, new int[]{23});
    rules[38] = new Rule(-11, new int[]{24});
    rules[39] = new Rule(-11, new int[]{25});
    rules[40] = new Rule(-11, new int[]{26});
    rules[41] = new Rule(-6, new int[]{-6,-12,-7});
    rules[42] = new Rule(-6, new int[]{-7});
    rules[43] = new Rule(-12, new int[]{27});
    rules[44] = new Rule(-12, new int[]{28});
    rules[45] = new Rule(-7, new int[]{-7,-13,-8});
    rules[46] = new Rule(-7, new int[]{-8});
    rules[47] = new Rule(-13, new int[]{29});
    rules[48] = new Rule(-13, new int[]{30});
    rules[49] = new Rule(-8, new int[]{-8,-14,-9});
    rules[50] = new Rule(-8, new int[]{-9});
    rules[51] = new Rule(-14, new int[]{19});
    rules[52] = new Rule(-14, new int[]{20});
    rules[53] = new Rule(-9, new int[]{-15,-9});
    rules[54] = new Rule(-9, new int[]{43});
    rules[55] = new Rule(-9, new int[]{41});
    rules[56] = new Rule(-9, new int[]{42});
    rules[57] = new Rule(-9, new int[]{33,-3,34});
    rules[58] = new Rule(-15, new int[]{28});
    rules[59] = new Rule(-15, new int[]{32});
    rules[60] = new Rule(-15, new int[]{31});
    rules[61] = new Rule(-15, new int[]{39});
    rules[62] = new Rule(-15, new int[]{40});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 109 "kompilator.y"
 #line default
}
}
